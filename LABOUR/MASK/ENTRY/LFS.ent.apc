{Application 'LFS' logic file generated by CSPro}
PROC GLOBAL
numeric tot, OK, i;

function TestValidityName(string name) 
	if strip(name) = "" then
		errmsg("Name/text cannot be blank");
		reenter; //not allow to continue without fill a name
	elseif length(strip(name)) < 2 then
		errmsg("Name/text %s is too short",strip(name));
		reenter;
	elseif pos(name[1:1], " 0123456789@,;:!?/#-+*.=()\_{}°[]")>0 then //$[1:1] extract the first character of the name. A name cannot start by one of this letter"0123456789@,;:!?/#-+*.=()\_{}°"
		errmsg("Name/text cannot start with %s",name[1:1]);
		reenter;
	endif;	
end;

function Onstop()
	ok = accept(TR("What do you want ?"), tr("Save"),tr("Cancel"),tr("Exit without save"));
	
	if ok in 3 then
		stop(1);
	elseif ok = 1 then
		savepartial();
		stop(1);
	elseif ok in 0, 2 then
		reenter;
	endif;

end;


PROC LFS_FF

PROC LFS_LEVEL

stop(1);
PROC SECT_HH_FORM

preproc
	if ispartial() then
		ok = accept(tr("This questionnaire is partially saved, do you want to go to the last position ?"),"Yes","No");
		if ok = 1 then
			advance to getsymbol(savepartial);
		endif;
	endif;
PROC HH1
preproc
	BADCLOSEDHH = 0;
	
	if visualvalue($) = notappl then
		$ = tonumber(sysparm("cluster"));
	endif;
	
	if !special(visualvalue($)) then
		protect($,true)
	else
		protect($,false)
	endif;
PROC HH2
preproc
	if visualvalue($) = notappl then
		$ = tonumber(sysparm("HHnumber"));
	endif;
	
	if !special(visualvalue($)) then
		protect($,true)
	else
		protect($,false)
	endif;
PROC HH7

preproc
	if visualvalue($) = notappl then
		$ = tonumber(sysparm("area"));
	endif;
	
	if !special(visualvalue($)) then
		protect($,true)
	else
		protect($,false)
	endif;
PROC HH8

preproc
	if visualvalue($) = notappl then
		$ = tonumber(sysparm("lga"));
	endif;
	
	if !special(visualvalue($)) then
		protect($,true)
	else
		protect($,false)
	endif;
PROC HH3

preproc
	if visualvalue($) = notappl then
		$ = tonumber(sysparm("interviewer"));
	endif;
PROC HH4

preproc

	$ = int(HH3/10)*10;

	// $ = tonumber(edit("999",HH3)[1:2] + "0");
PROC HH6
PREPROC

	numeric startingDate = 20231213;//Declaring starting date of the survey; need to
	numeric endDate = 20241231;//Declaring end date of the survey; need to

	//Test that the tablet has the right date

	if !(sysdate("YYYYMMDD") in startingDate : endDate)  then
		errmsg("Your tablet don't have the right date (%02d/%s/%04d), please set the date of your tablet",sysdate("DD"),getlabel(HL5M,sysdate("MM")),sysdate("YYYY"));
		stop(1);
	endif;

POSTPROC

	IF !(HH6 in  startingDate:sysdate("YYYYMMDD")) then
		errmsg("Date out of range, please correct the date");
		reenter;
	endif;
PROC HH10

preproc
	if visualvalue(HH10) = 1 then
		noinput
	endif;

postproc
	if $ = 2 then
		skip to ENDHH_FORM;
	endif;
PROC HH9

preproc
	if visualvalue($) = notappl then
		$ = systime("HHMM");
	endif;

PROC XSTARTHH

preproc
	if visualvalue($) = notappl then
		$ = timestamp();
	endif;
PROC HH5A

POSTPROC

	TestValidityName(HH5A);
PROC HH5B

preproc
	if curocc()>1 then
		ask if $(curocc()-1)>0
	endif;
	
POSTPROC
	STRING phone = maketext("%d",$);
	
	if $ <> 0 then
		if !(length(phone) in 7,9) or phone[1:1] in "0","1" then
			errmsg(100,$);
		endif;		
	endif;

PROC HL1
PREPROC
	$ = curocc();
PROC HL2
PREPROC
	
	if curocc() = 1 then
		$ = HH5A;
	endif;

POSTPROC
	TestValidityName(HL2);

	
	if curocc() = 1 then
		$ = HH5A;
	endif;
PROC HL3

onfocus
	valueset sanna;
	sanna = HL3_VS1;

	if curocc() = 1 then
		sanna.clear();
		sanna.add("HEAD",1);

	elseif curocc()>1 and HL4(1) = 1 then
		sanna.remove(1);
		sanna.remove(15); //removes co-wives when the HH head is male
	elseif curocc()>1 and HL4(1) = 2 then
		sanna.remove(1);
	endif;
	
	setvalueset($,sanna);
PROC HL4

if curocc() > 1 then
	if HL3 = 2 and HL4 = HL4(1) then 
		errmsg("Household head and spouse/partner are same sex")
		select ("Correct sex",HL4,"Correct Relationship",HL3) ;
	endif;
endif;
PROC HHMORE

POSTPROC
	IF $ = 2 then
		endgroup;
	endif;
PROC HHSIZE

preproc
	//totocc()
	//count()
	$ = count(HL1 where HL1 > 0);
PROC HL5D

preproc
	if curocc() > HHSIZE then
		endgroup;
	endif;
PROC HL5Y

IF HL5D IN 1:31 and HL5M in 1:12 and !datevalid((HL5Y*100+HL5M)*100+HL5D) then
	errmsg("Invalid date : day = %d, month = %s, year = %d",HL5D,getvaluelabel(HL5M),HL5Y)
	select("Correct the day",HL5D,"Correct the month",HL5M,"Correct the year",HL5Y);
endif; 

IF HL5D IN 1:31 and HL5M in 1:12 and (HL5Y*100+HL5M)*100+HL5D > HH6 then
	errmsg("The date of birth (%02d/%s/%d) cannot be after the date of interview date (%02d/%s/%d) ",HL5D,getvaluelabel(HL5M),HL5Y,HH6%100,getlabel(HL5M,int(HH6/100)%100),int(HH6/10000))
	select("Correct the day",HL5D,"Correct the month",HL5M,"Correct the year",HL5Y);
endif; 
PROC HL6
onfocus
	numeric day = HL5D; if day = 97 then day = 1 endif;
	numeric month = HL5M; if month = 97 then month = 6 endif;
	$ = low(98,datediff((HL5Y*100+month)*100+day,HH6,"y"));

postproc

	$ = low(98,datediff((HL5Y*100+month)*100+day,HH6,"y"));
	
	if curocc() = 1 then //control the minimum age of household head
		if HL6(1) < 15 then
			errmsg(103,HL6(1));
			reenter; //cannot allow hh head to be aged less than 15 years
		elseif HL6(1) < 18 then
			errmsg(103,HL6(1));
		endif;
	elseif curocc() > 1 then //control on the difference of age between the son, grand son, parent, grandparent and hh head
		if 	   (HL3 = 3 and HL6(1) - HL6 < 15) 
			or (HL3 = 5 and HL6(1) - HL6 < 30) 
			or (HL3 = 6 and HL6 - HL6(1) < 15) 
			or (HL3 = 8 and abs(HL6 - HL6(1)) > 20) 
			or (HL3 = 16 and HL6 - HL6(1) < 30) 
		then
			errmsg(104,curocc(),strip(HL2(curocc())),HL6,getvaluelabel(HL3(curocc())),HL6(1), abs(HL6(1) - HL6)  );
		endif;
	
	endif;

	if $ < 12 then
		skip to HL10;
	endif;
PROC HL8

POSTPROC

	if HL6 < 18 and  HL8 in 2:4 then
		errmsg(101,curocc(),strip(HL2(curocc())),HL6,getvaluelabel(HL8))
	endif;
	
	IF HL3(curocc()) = 2 and HL8 in 1,4 then
		errmsg(111,curocc(),strip(HL2(curocc())),getvaluelabel(HL8),getlabel(HL3,HL3(curocc())));
		reenter;		
	endif;
	
	if curocc() = 1 and HL3 has 2 and !HL8 in 2,3 then
		errmsg("There is a spouse/partner in that household, so the household head cannot be %l, please correct.",$);
		reenter;
	endif;
	
	IF $ <> 2 then
		skip to HL10;
	endif;
PROC HL9

	if HL6 < 20 and HL4(curocc()) = 1 and  HL9 = 2 then
		errmsg(102,curocc(),strip(HL2(curocc())),HL6,getvaluelabel(HL9))
	endif;

	if curocc() = 1 and count(HL3 where HL3 = 2 ) >= 2 and HL9 = 1 then
		errmsg(112,curocc(),strip(HL2(curocc())),getvaluelabel(HL9),count(HL3 where HL3 = 2 ));
	endif;
	
	if HL3(curocc()) = 2 and HL9 <> HL9(1) then
		errmsg(113,curocc(),strip(HL2(curocc())),getvaluelabel(HL9),getlabel(HL9,HL9(1)));
	endif;
PROC HL10

IF strip($) = "" then
	errmsg(114);
	reenter;
endif;

IF pos("M",$) and length(strip($)) > 1 then
	errmsg(106);
	reenter;
endif;

if pos("A",$) = 0 then
	skip to HL12;
endif;

PROC HL11


if curocc() > 1 and HL4(1) = 1 then //check that son/daughter are same ethnicity of male hh head
	if HL3(curocc()) = 3 and HL11 <> HL11(1) then
		errmsg(105,curocc(),strip(HL2(curocc())),getvaluelabel(HL11),getvaluelabel(HL3(curocc())),getvaluelabel(HL11(1)))
	endif;
endif;
PROC HL11X

preproc
	ask if HL11 = 96;

postproc
	TestValidityName($);
PROC HL12

// if HL12 <= 4 then
	// skip to SECT_ED_FORM;
	// skip to ED1(1);
// endif;
PROC HL12X
preproc

ASK IF HL12 = 96;

postproc
	TestValidityName($);
PROC HH13

IF strip($) = "" then
	errmsg(114);
	reenter;
endif;
PROC HH13X

preproc
	ask if ischecked("J",HH13);
PROC HH14

preproc
	string resp = "ABCDEFGHIJ";
	valueset valset;
	
	do i = 1 while i<= length(resp)
		if ischecked(resp[i:1],HH13) then
			valset.add(HH14_vs1.labels(i),HH14_VS1.codes(i));
		endif;
	enddo;
	
	if valset.codes.length() > 1 then
		valset.add("CANNOT SAY",97);
		setvalueset($,valset);
	else
		$ = valset.codes(1);
		setvalueset($,valset);
		advance to SECT_ED_FORM; //it is to make this advance works and allow to use the left arrow to return that this program is duplicated in the onfocus
	endif;
	
onfocus
	valset.clear();
	do i = 1 while i<= length(resp)
		if ischecked(resp[i:1],HH13) then
			valset.add(HH14_vs1.labels(i),HH14_VS1.codes(i));
		endif;
	enddo;
	
	if valset.codes.length() > 1 then
		valset.add("CANNOT SAY",97);
		setvalueset($,valset);
	else
		$ = valset.codes(1);
		setvalueset($,valset);
	endif;
	
PROC ED1

preproc
	if curocc() > HHSIZE then
		endgroup;
	endif;
	$=CUROCC();
	
POSTPROC
	IF HL6(CUROCC())<3 THEN 
		SKIP TO NEXT ED1;
	ENDIF;
{PROC ED2
preproc
	$ = HL2(curocc());
PROC ED4

POSTPROC

	if $=1 then
		skip to ED6;
	elseif $=7 then
		skip to ED9;
	endif;

PROC ED5

if $ <> 96 then
	skip to ED9;
endif;
PROC ED5X

preproc
	ask if ED5 = 96;

postproc

	TestValidityName($);
	skip to ED9;
PROC ED6

if $ = 2 then
	skip to ED8L;
elseif $ = 97 then
	skip to ED9;
endif;
PROC ED7L

if $ = 0 then
	skip to next ED1;
endif;
PROC ED7G

onfocus
	valueset valset;
	valset.clear();


	if ED7L = 0 then do i = 1 while i<=4 valset.add(maketext("%d",i),i); enddo; endif;
	if ED7L = 1 then do i = 1 while i<=6 valset.add(maketext("%d",i),i); enddo; endif;
	if ED7L = 2 then do i = 1 while i<=3 valset.add(maketext("%d",i),i); enddo; endif;
	if ED7L = 3 then do i = 1 while i<=3 valset.add(maketext("%d",i),i); enddo; endif;
	if ED7L = 4 then do i = 1 while i<=2 valset.add(maketext("%d",i),i); enddo; endif;
	if ED7L = 5 then do i = 1 while i<=2 valset.add(maketext("%d",i),i); enddo; endif;
	if ED7L = 6 then do i = 1 while i<=10 valset.add(maketext("%d",i),i); enddo; endif;
		

	valset.add("DON’T KNOW",97);
	
	setvalueset($,valset);
PROC ED8L

if $ = 0 then
	skip to next ED1;
endif;
PROC ED8G

onfocus
	valueset valset;
	valset.clear();


	if ED8L = 0 then do i = 0 while i<=4 valset.add(maketext("%d",i),i); enddo; endif;
	if ED8L = 1 then do i = 0 while i<=6 valset.add(maketext("%d",i),i); enddo; endif;
	if ED8L = 2 then do i = 0 while i<=3 valset.add(maketext("%d",i),i); enddo; endif;
	if ED8L = 3 then do i = 0 while i<=3 valset.add(maketext("%d",i),i); enddo; endif;
	if ED8L = 4 then do i = 0 while i<=2 valset.add(maketext("%d",i),i); enddo; endif;
	if ED8L = 5 then do i = 0 while i<=3 valset.add(maketext("%d",i),i); enddo; endif;
	if ED8L = 6 then do i = 0 while i<=10 valset.add(maketext("%d",i),i); enddo; endif;
		

	valset.add("DON’T KNOW",97);
	
	setvalueset($,valset);
PROC ED8B

preproc
	ask if ED8L in 4:6;
PROC ED9

preproc
	ask if ED8L in 0,1,97,notappl;}
PROC ED2

if $ = 2 then
	skip to ED6;
elseif $ = 97 then
	skip to ED7;
endif;
PROC ED3L

if $ = 97 then
	skip to ED4;
endif;
PROC ED3G

onfocus
	valueset valset;
	valset.clear();

	valset.add("NO GRADE COMPLETED",0);
	if ED3L = 0 then do i = 1 while i<=4 valset.add(maketext("%d",i),i); enddo; endif;
	if ED3L = 1 then do i = 1 while i<=6 valset.add(maketext("%d",i),i); enddo; endif;
	if ED3L = 2 then do i = 1 while i<=3 valset.add(maketext("%d",i),i); enddo; endif;
	if ED3L = 3 then do i = 1 while i<=3 valset.add(maketext("%d",i),i); enddo; endif;
	if ED3L = 4 then do i = 1 while i<=2 valset.add(maketext("%d",i),i); enddo; endif;
	if ED3L = 5 then do i = 1 while i<=3 valset.add(maketext("%d",i),i); enddo; endif;
	if ED3L = 6 then do i = 1 while i<=12 valset.add(maketext("%d",i),i); enddo; endif;
		

	valset.add("DON’T KNOW",97);
	
	setvalueset($,valset);
PROC ED4

preproc
	if !(HL6(CUROCC()) >=3 ) then
		skip ED7;
	endif;

postproc
	if $ in 2,97 then
		skip to ED7;
	endif;
PROC ED5L

if ED5L <> ED3L then
	errmsg("The current level (%s) is different from the highest level (%s)",getvaluelabel(ED5L),getvaluelabel(ED3L))
	select("Correct the current level",reenter,"Correct the highest level",ED3L,"Individual demoted", continue);
endif;

if $ = 97 then
	skip to ED7;
endif;
PROC ED5G

onfocus
	valueset valset;
	valset.clear();

	if ED5L = 0 then do i = 1 while i<=4 valset.add(maketext("%d",i),i); enddo; endif;
	if ED5L = 1 then do i = 1 while i<=6 valset.add(maketext("%d",i),i); enddo; endif;
	if ED5L = 2 then do i = 1 while i<=3 valset.add(maketext("%d",i),i); enddo; endif;
	if ED5L = 3 then do i = 1 while i<=3 valset.add(maketext("%d",i),i); enddo; endif;
	if ED5L = 4 then do i = 1 while i<=2 valset.add(maketext("%d",i),i); enddo; endif;
	if ED5L = 5 then do i = 1 while i<=3 valset.add(maketext("%d",i),i); enddo; endif;
	if ED5L = 6 then do i = 1 while i<=12 valset.add(maketext("%d",i),i); enddo; endif;
		

	valset.add("DON’T KNOW",97);
	
	setvalueset($,valset);

postproc

	if ED3G <> ED5G-1 then
		errmsg("The current grade (%d) is not consistent with the highest grade (%d)",ED5G,ED3G)
		select("Correct the current grade",reenter,"Correct the highest grade",ED3G,"Individual demoted", continue);
	endif;
	
	skip to ED7;
PROC ED6X

preproc
	ask if ED6 = 96;
PROC ED7

onfocus
	protect($,false);
	
	if !(ED3L in 0,1,4,97) then
		$ = 1;
		protect($,true);
	endif;
PROC ED8

preproc
	ask if ED3L in 4,5,6;
PROC ED9

preproc
	ask if ED2 in 2,97 or ED4 in 2,97;
PROC TR1
preproc
	$ = curocc();

POSTPROC
	IF !(HL6(curocc()) >= 15) then
		skip to next TR1
	endif;
PROC TR2
preproc
	$ = HL2(curocc());
PROC TR3

if $ in 2,97 then
	skip to next;
endif;
PROC TR4

if $ in 97 then
	skip to next;
endif;
PROC TR5

if strip($)="" then
	errmsg(115);
	reenter;
endif;
PROC TR6X
preproc
	ask if TR6 = 96 ;
PROC TR9

preproc
	ask if TR8 in 1,2;
	
PROC IM1

preproc
	$ = curocc();
PROC IM2

preproc
	$ = HL2(curocc());
PROC IM3

if $ = 99 then
	skip to next IM1;
endif;
PROC IM4X

preproc
	ask if IM4 = 9;

PROC IM5X

preproc
	ask if IM5 = 96; 

postproc
	TestValidityName($);
PROC IM6X

preproc
	ask if IM6 = 9; 

PROC MIG1
preproc
	$ = curocc();
PROC MIG2
preproc
	$ = HL2(curocc());
PROC MIG3

if $ = 1 then
	skip to MIG8;
endif;
PROC MIG4

postproc
	
	if IM6X(curocc()) <> notappl and IM6X(curocc()) <> $ then
		
		errmsg("Difference between country birth from internal Migration IM6X = %l, and International Migration MIG4 = %l",IM6X(curocc()),MIG4)
		select("Correct IM6X",IM6X(curocc()),"Correct MIG4",MIG4);
	endif;
	

PROC MIG5Y

if $ <> 9997 then
	skip to MIG7
endif;
PROC MIG7X

preproc
	ask if MIG7 = 96;

postproc
	TestValidityName($);
PROC MIG8


IF strip($) = "" then
	errmsg(114);
	reenter;
endif;

if pos("C",$) and length(strip($)) > 1 then
	errmsg(106);
	reenter;
endif;

if !(ischecked("A", HL10(curocc())) <=> ischecked("A",MIG8))  then
	errmsg(107,curocc(),strip(MIG2(curocc())));
endif;

if !(ischecked("M", HL10(curocc())) <=> ischecked("C",MIG8))  then
	errmsg(108,curocc(),strip(MIG2(curocc())));
endif;

// errmsg("bjr %d %d %d",poschar("BCDEFGHIJKL", STRIP(HL10(curocc()))), ischecked("B",MIG8),!(poschar("BCDEFGHIJKL", STRIP(HL10(curocc())))>0 <=> ischecked("B",MIG8)) );

if !(poschar("BCDEFGHIJKL", STRIP(HL10(curocc())))>0 <=> ischecked("B",MIG8))  then
	errmsg(109,curocc(),strip(MIG2(curocc())));
endif;
PROC MIG9

preproc
	ask if ischecked("B",MIG8);

postproc 

	IF strip($) = "" then
		errmsg(114);
		reenter;
	endif;

	if pos("Z",$) and length(strip($)) > 1  then 
		errmsg(106);
		reenter;
	endif;

	string nat = "BCDEFGHIJKL";
	string text = "";
	
	do i = 1 while i <= length(nat)
		string xi = nat[i:1];
		if !(ischecked( xi,HL10(curocc())) <=> ischecked( xi,MIG9) ) then
		
			text = text + getlabel(HL10_VS1,xi) + ",";
		endif;
	enddo;
	
	if text <> "" then
		errmsg(110,curocc(),strip(MIG2(curocc())),text);
	endif;
PROC FN1
preproc
	$ = curocc();

postproc
	if !(HL6(curocc())>=15) then
		skip to next
	endif;
PROC FN2
preproc
	$ = HL2(curocc());
PROC HH12
preproc
	if visualvalue($) = notappl then
		$ = systime("HHMM");
	endif;

PROC II5A
preproc
	$ = curocc();

postproc
	if HL6(curocc()) < 10 then
		skip to next II5A;
	endif;
PROC II5B
preproc
	$ = HL2(curocc());
PROC II7

preproc
	if visualvalue($) = notappl then
		$ = systime("HHMM");
	endif;

PROC XSTART

preproc
	if visualvalue($) = notappl then
		$ = timestamp();
	endif;
PROC II8

IF $ = 2 then
	skip to II9
endif;
PROC EMP4

if $ = 1 then 
	skip to CM1
endif;
PROC EMP5

if $ = 1 then 
	skip to EMP13
endif;
PROC EMP6

if $ = 1 then 
	skip to EMP13
endif;
PROC EMP7

if $ = 2 then 
	skip to EMP12
endif;
PROC EMP8


if $ = 1 then 
	skip to EMP12
elseif $ = 2 then
	skip to EMP11	
elseif $ in 3:6 then
	skip to EMP13
endif;
PROC EMP8X

preproc
	ask if EMP8 = 96;

postproc
	TestValidityName($);
PROC EMP9

if $ = 1 then 
	skip to EMP13
endif;
PROC EMP10

if $ = 1 then 
	skip to EMP13
elseif $ in 2,97 then
	skip to EMP12
endif;
PROC EMP11

if $ = 1 then 
	skip to EMP13
endif;
PROC EMP12



IF strip($) = "" then
	errmsg(114);
	reenter;
endif;

if ischecked("D",$) and length(strip($)) > 1 then
	errmsg("Wrong combination of choice, please correct");
	reenter;
endif;

IF $ = "D" then
	skip to JS1
else
	skip to EMP14
endif;
PROC EMP13


IF strip($) = "" then
	errmsg(114);
	reenter;
endif;

if ischecked("D",$) and length(strip($)) > 1 then
	errmsg("Wrong combination of choice, please correct");
	reenter;
endif;

IF $ = "D" then
	skip to CM1
endif;
PROC EMP14

if $ in 1,2 then
	skip to CM1
endif;
PROC EMP15

if $ = 1 then
	skip to CM1
endif;
PROC EMP16

TestValidityName($);
PROC EMP17
Postproc
IF $=0 then 
	skip to JS1;
	ENDIF;
PROC EMP18
postproc
skip to JS1;
PROC CM2
TestValidityName($);
PROC CM2A
TestValidityName($);
PROC CM3
TestValidityName($);
PROC CM3B
TestValidityName($);
PROC CM3C

IF testAgeOccu(HL6(II5A),CM3C) then
	errmsg(201,II5A,strip(II5B),HL6(II5A),getvaluelabel(CM3C));
endif;


// IF testEduOccu(ED8L(II5A),CM3C) then
	 //errmsg(202,II5A,strip(II5B),getvaluelabel(CM3C),Getvaluelabel(ED4(II5A)),Getvaluelabel(ED7L(II5A)),Getvaluelabel(ED8L(II5A)));
// endif;
PROC CM5

if $ in 1,4,5 then
	skip to CM10
elseif $ = 2 then
	skip to CM7
endif;
PROC CM6

if $ in 3,4 then
	skip to CM11
endif;
PROC CM7

if $ = 1 then
	skip to CM21
endif;
PROC CM8


if $ = 1 then
	skip to CM9B1
elseif $ = 3 then
	skip to CM25
endif;
PROC CM9

if $ in 1,2 then
	skip to CM9B1
elseif $ in 3,4 then
	skip to CM25
endif;
PROC CM9B6


skip to CM25;
PROC CM11


IF strip($) = "" then
	errmsg(114);
	reenter;
endif;

if ischecked("I",$) and length(strip($)) > 1 then
	errmsg("Wrong combination of choice, please correct");
	reenter;
endif;

if pos("A",CM11)=0 and CM10 in 1,6 then
	errmsg("institutional sector (CM10 = %s) but not receiving salary (CM11), please correct",getvaluelabel(CM10) )
	select("Correct CM11",reenter,"Correct CM10",CM10);
endif;

if pos("A",CM11)=0 and CM10 in 5 then
	errmsg(209,II5A,strip(II5B),getvaluelabel(CM10) )
	select("Correct CM11",reenter,"Correct CM10",CM10,"Continue",continue);
endif;

if STRIP($) = "I" then
	skip to CM25
endif;
PROC CM11X

preproc
	ask if ischecked("H", CM11);

postproc
	TestValidityName($);
PROC CM12X

preproc
	ask if CM12 = 96;

postproc
	TestValidityName($);
PROC CM13

if $ = 97 then
	skip to CM21
endif;
PROC CM14

if $ = 1 then
	skip to CM16
endif;
PROC CM15

skip to CM17;
PROC CM17

if $ in 3,4 then
	skip to CM22
endif;
PROC CM18

if $ = 8 then
	skip to CM21
endif;
PROC CM19


IF strip($) = "" then
	errmsg(114);
	reenter;
endif;

if ischecked("E",$) and length(strip($)) > 1 then
	errmsg("Wrong combination of choice, please correct");
	reenter;
endif;

if pos("A",$) | pos("C",$) | pos("D",$) then
	skip to CM22
endif;
PROC CM20

	skip to CM22;
PROC CM21

if CM7 = 1 then
	skip to CM25;
endif;
PROC CM25

if CM25 in 1,2,5,6,7,8 and CM10 in 1,5,6 then
	errmsg("institutional sector (CM10 = %s) and place of work (CM25 = %s) are inconsistent",getvaluelabel(CM10), getvaluelabel(CM25) )
	select("Correct CM25",reenter,"Correct CM10",CM10);
endif;
PROC CM25X
preproc
	ask if CM25 = 8;

postproc
	TestValidityName($);
PROC CM27


if CM27 <> 1 and CM10 in 1,5,6 then
	errmsg(205,II5A,strip(II5B),getvaluelabel(CM10), getvaluelabel(CM27) )
	select("Correct CM27",reenter,"Correct CM10",CM10,"Continue",continue);
endif;

IF $ <> 1 then
	skip to CM29
endif;
PROC CM27A

if CM27A <> 1 and CM10 in 1,5,6 then
	errmsg(206,II5A,strip(II5B),getvaluelabel(CM10), getvaluelabel(CM27A) )
	select("Correct CM27A",reenter,"Correct CM10",CM10,"Continue",continue);
endif;

IF $ <> 1 then
	skip to CM29
endif;
PROC CM28



if CM28 <> 1 and CM10 in 1,6 then
	errmsg(207,II5A,strip(II5B),getvaluelabel(CM10), getvaluelabel(CM28) )
	select("Correct CM28",reenter,"Correct CM10",CM10,"Continue",continue);
endif;

IF $ = 1 then
	skip to CM30
endif;
PROC CM29


if CM29 <> 1 and CM10 in 1,5,6 then
	errmsg(208,II5A,strip(II5B),getvaluelabel(CM10), getvaluelabel(CM29) )
	select("Correct CM29",reenter,"Correct CM10",CM10,"Continue",continue);
endif;

PROC CS1

preproc
	if CM1 = 2 then
		skip to WKT1;
	
	endif;
	
	
postproc
	TestValidityName($);
PROC CS1A
TestValidityName($);
PROC CS1B

If int(CS1b/100)=int(CM2b/100) and CM2b > 0 then
	errmsg("Main and secondary economic activities cannot be the same group")
	select("correct Main activity (CM2b)",CM2b, "correct secondary activity (CS1b)",CS1b);
endif;
PROC CS2
TestValidityName($);
PROC CS2A
TestValidityName($);
PROC CS2B

IF testAgeOccu(HL6(II5A),CS2B) then
	errmsg(203,II5A,strip(II5B),HL6(II5A),getvaluelabel(CS2B));
endif;

IF testEduOccu(ED3L(II5A),CS2B) then
	errmsg(204,II5A,strip(II5B),getvaluelabel(CS2B),Getvaluelabel(ED2(II5A)),Getvaluelabel(ED5L(II5A)),Getvaluelabel(ED3L(II5A)));
endif;
// IF testEduOccu(ED8L(II5A),CS2B) then
	//errmsg(204,II5A,strip(II5B),getvaluelabel(CS2B),Getvaluelabel(ED4(II5A)),Getvaluelabel(ED7L(II5A)),Getvaluelabel(ED8L(II5A)));
// endif;
PROC CS3

IF $ in 1,3,4,5 then
	skip to CS8
ELSEIF $ = 2 then
	//skip to CS5
endif;
PROC CS4

IF $ = 1 then
	skip to WKT1
endif;
PROC CS5

IF $ = 1 then
	skip to CS71
elseif $ = 3 then
	skip to WKT1
endif;
PROC CS6

IF $ in 3,4 then
	skip to WKT1
endif;
PROC CS76

	skip to WKT1;
PROC CS8


IF strip($) = "" then
	errmsg(114);
	reenter;
endif;

if ischecked("I",$) and length(strip($)) > 1 then
	errmsg("Wrong combination of choice, please correct");
	reenter;
endif;
PROC CS8X

preproc
	ask if ischecked("H",CS8);

postproc
	TestValidityName($);
PROC WKT1

if $ = 0 then
	errmsg("Usually working time cannot be 0, please correct");
	reenter;
endif;
PROC WKT3

preproc
	if CM1 <> 1 then
		skip to WKT8A
	endif;

postproc

	if $ = 0 then
		errmsg("Usually working time cannot be 0, please correct");
		reenter;
	endif;
PROC WKT5

if $ = 2 then
	skip to WKT8A
endif;
PROC WKT6

postproc

	if $ = 0 then
		errmsg("Usually working time cannot be 0, please correct");
		reenter;
	endif;
PROC WKT8A

onfocus
	tot = 0;
	if WKT1 < 997 then inc(tot,WKT1); endif;
	if WKT3 < 97 then inc(tot,WKT3); endif;
	if WKT6 < 97 then inc(tot,WKT6); endif;

	$ = tot;

postproc
	$ = tot;
PROC WKT8B

onfocus
	tot = 0;
	if WKT2 < 997 then inc(tot,WKT2); endif;
	if WKT4 < 97 then inc(tot,WKT4); endif;
	if WKT7 < 97 then inc(tot,WKT7); endif;

	$ = tot;

postproc
	$ = tot;
PROC WKT10

preproc
	if !(WKT8A<35) then
		skip to WKT13
	endif;
	
postproc
	if $ = 2 then
		skip to WKT13
	endif;
PROC WKT11
	
postproc
	if $ = 2 then
		skip to WKT13
	endif;
PROC WKT14
	
postproc
	if $ = 2 then
		skip to OPA1
	endif;
PROC WKT15X

preproc
	ask if WKT15 = 96;

postproc
	TestValidityName($);
PROC OPA1

preproc
	if EMP4 <> 1 then
		skip to EI1
	ENDIF;

postproc

	IF strip($) = "" then
		errmsg(114);
		reenter;
	endif;
	
	if ischecked("E",$) and length(strip($)) > 1 then
		errmsg("Wrong combination on choice, please correct");
		reenter;
	endif;

	if strip($) = "E" then
		skip to EI1
	endif;
PROC OPA2
TestValidityName($);
PROC EI1

preproc
	if !(CM5 in 1,4) then
		skip to EI11
	endif;
	
postproc
	if $ in 2,3 then
		skip to EI6
	endif;
PROC EI3

	if $ in 1,2 then
		skip to EI6
	endif;
PROC EI3X

preproc
	ask if EI3 = 96;

postproc
	TestValidityName($);
PROC EI6


	IF strip($) = "" then
		errmsg(114);
		reenter;
	endif; 

	if ischecked("Y",$) and length(strip($)) > 1 then
		errmsg("Wrong combination of choice; you can't select NONE with other options, please correct");
		reenter;
	endif;

	if strip($) = "Y" then
		skip to EI10
	endif;
PROC EI6X

preproc
	ask if ischecked("X", EI6);

postproc
	TestValidityName($);


PROC EI8

	if $ = 2 then
		skip to EI10
	endif;
PROC EI11

preproc
	if !(CM5 in 2,3,5) then
		skip to JS1
	endif;
PROC EI12

	if $ in 2,3 then
		skip to EI14
	endif;
PROC JS1

PREPROC
	if !(EMP15 = 2 or EMP12 = "D") then
		skip to OPG1
	endif;

postproc
	if $ = 1 then
		skip to JS3
	endif;
PROC JS2

postproc
	if $ = 2 then
		skip to JS4
	endif;
PROC JS3

if $ in 1:10 then
	skip to JS6
endif;
PROC JS3X

preproc
	ask if JS3 = 96;


postproc
	TestValidityName($);
	skip to JS6;
PROC JS4

if $ = 2 then
	skip to JS8
endif;
PROC JS5

if $ in 2:10 then
	skip to JS7
endif;
PROC JS5X

preproc
	ask if JS5 = 96;
	

postproc
	TestValidityName($);
	skip to JS7;
PROC JS7

if $ = 1 then
	skip to OPG1
endif;
PROC JS7B

if $ = 1 then
	skip to OPG1
endif;
PROC JS8


if $ = 7 then
	skip to OPG1
endif;
PROC JS8X

preproc
	ask if JS8 = 96;

postproc
	TestValidityName($);
PROC OPG1

postproc
	if $ = 2 then
		skip to OPG3
	endif;
	
PROC OPG3

postproc
	if $ = 2 then
		skip to OPG5
	endif;
PROC OPG5

postproc
	if $ = 2 then
		skip to OPG7
	endif;
PROC OPG7

postproc
	if $ = 2 then
		skip to OPG9
	endif;
PROC OPG9

postproc
	if $ = 2 then
		skip to OPG11
	endif;
PROC OPG11

IF $ = 2 then
	skip to OPG13
endif;
PROC OPG13

IF $ = 2 then
	skip to OPG15
endif;
PROC OPG15

IF $ = 2 then
	skip to H1
endif;
PROC H1

preproc
	
	skip to EBR1; //this skip is because for this stage we skip section H
	
	
	if  !(HL6(curocc()) in 5:17) or !(1 in EMP4,EMP5,EMP6,EMP7 or pos("A",EMP12) or pos("B",EMP12) or pos("C",EMP12) or pos("A",OPA1) or pos("B",OPA1) or pos("C",OPA1) or  1 in OPG1, OPG3, OPG5, OPG7, OPG9, OPG11, OPG13, OPG15 ) then
		skip to II9;
	endif;
	
PROC H21

if $ <> 1 then
	skip to H23
endif;
PROC H23

if $ <> 1 then
	skip to H25
endif;
PROC H25

if $ <> 1 then
	skip to II9
endif;
PROC EBR1

preproc
	numeric x = curocc();
	
	if !((FN3(x) in 3,4) or (FN4(x) in 3,4) or (FN5(x) in 3,4) or (FN6(x) in 3,4) or (FN7(x) in 3,4) or (FN8(x) in 3,4)) then
		skip to II9;
	endif;
	
	if !(EMP12 = "D" or EMP15 = 2) then
		skip to WPA1;
	endif;

postproc

	IF strip($) = "" then
		errmsg(114);
		reenter;
	endif;
PROC EBR1X

preproc
	ask if ischecked("I",EBR1);
PROC EBR2

skip to ATT1;
PROC WPA1

preproc
	// if !(EMP4=1 or EMP13="D" or EMP14 in 1,2 or EMP15 = 1) then 
		
	// endif;
PROC SPR1

	if $ = 2 then
		skip to II9;
	endif;
PROC II9

onfocus
	valueset valset ;
	valset = II9_VS1;
	if II8 = 1 then
		$= 1;
		protect($,true)
	else
		valset.remove(1);
		protect($,false);
	endif;
	
	setvalueset($,valset);
PROC II9X

PREPROC
	ASK IF II9 = 96;

postproc
	TestValidityName($);
PROC II10
preproc
	if visualvalue($) = notappl then
		$ = systime("HHMM");
	endif;

PROC XEND

preproc
	if visualvalue($) = notappl then
		$ = timestamp();
	endif;
PROC XGPS
preproc
	savepartial();
	
postproc

	if (XGPS = 1 and special(visualvalue(LON))) or XGPS = 2 then
		if getos() = 10 then //windows
			//gps(open,3,4800);
		elseif getos() in 20 then //android
			gps(open);
		endif;
		if gps(read,300,5) = 1 then
			LAT = gps(latitude);
			LON = gps(longitude);
			ALT = gps(altitude);
			XGPS = 1; //when we have succeeded in retrieving the coordinates, we put 1 back in the variable in case XGPS=2
		else
			reenter;
		endif;
		gps(close);
	elseif XGPS = 3 then
		skip to HH11;
	endif;
PROC LON

Preproc
	if  Special(visualvalue($))  then 
		move to XGPS; 
	endif;
PROC LAT

Preproc
	if  Special(visualvalue($))  then 
		move to XGPS; 
	endif;
PROC ALT

Preproc
	if  Special(visualvalue($))  then 
		move to XGPS; 
	endif;
PROC HH11
PREPROC
	for i in SECT_IND000
		if II8 = 2 and visualvalue(EMP4) <> notappl then
			errmsg("Interview of individual %d is partial do you want to return and complete it?",i)
			select("Return and complete", II6(i),"No exit and delete partial information",continue);
		endif;
	endfor;
	
onfocus
	valueset valset ;
	valset = HH11_VS1;
	if HH10 = 1 then
		$= 1;
		protect($,true)
	else
		valset.remove(1);
		valset.remove(9);
		protect($,false);
	endif;
	
	setvalueset($,valset);
		
	
PROC HH11X

preproc
	ask if HH11 = 96;
PROC BADCLOSEDHH

preproc
	$ = 1;

postproc
	
	errmsg("Questionnaire saved");
PROC XENDHH

preproc
	if visualvalue($) = notappl then
		$ = timestamp();
	endif;
